services:
  db:
    image: pgvector/pgvector:pg16   # <â€” instead of postgres:16
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-pricing}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-pricing}"]
      interval: 5s
      timeout: 3s
      retries: 20


  redis:
    image: redis:7
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    command: ["/app/entrypoint.sh"]
    env_file:
      - ../.env
    environment:
      DJANGO_SETTINGS_MODULE: config.settings
      DATABASE_URL: postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-pricing}
      REDIS_URL: redis://redis:6379/0
    volumes:
      - ../backend:/app
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started

  celery:
    build:
      context: ../backend
      dockerfile: Dockerfile
    command: ["celery", "-A", "config", "worker", "--loglevel=INFO"]
    env_file:
      - ../.env
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-pricing}
      REDIS_URL: redis://redis:6379/0
    volumes:
      - ../backend:/app
    depends_on:
      - backend
      - redis
      - db

  flower:
    image: mher/flower:2.0
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - FLOWER_PORT=5555
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - celery
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    env_file:
      - ../.env
    environment:
      VITE_API_BASE_URL: /api
    volumes:
      - ../frontend:/app
    depends_on:
      - backend

  nginx:
    image: nginx:1.27-alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../frontend/dist:/usr/share/nginx/html:ro
    depends_on:
      - frontend
      - backend



volumes:
  db_data:
  redis_data:
